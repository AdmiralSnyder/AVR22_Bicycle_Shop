@inherits UnityRemoteControlComponent
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client;

<div>
    <h3>Audiodatei hochladen</h3>

    <InputFile OnChange="@LoadFiles" multiple />

    <div>
    <!-- damit das POST nicht auf eine neue Seite geht, ist das Target des Formulars dieses unsichtbare div: -->
    <input type="button" id="broadcast" value="Stummschalten" @onclick=SetAudioMute />
    <input type="button" id="broadcast" value="laut schalten" @onclick=SetAudioUnmute />
    <input type="button" id="broadcast" value="Stop" @onclick=StopAudio />
    </div>
    <div>
        <p id="Status" ref="p_postInfo" />
    </div>
</div>

<h3>Befehl absenden</h3>
<form class="form-inline">
    <div class="input-append">
        <input type="text" id="message-text" placeholder="Befehl eingeben" @bind-value=CommandText />
        <input type="button" id="broadcast" class="btn" value="Absenden" @onclick=Command />
    </div>
</form>

<h3>Farbe festlegen</h3>
<form class="form-inline">
    <div class="input-append">
        <input type="color" id="message-color" placeholder="Select a color" @bind-value=Color /> @*onchange=@SetColor*@
    </div>
</form>

<h3>Animation festlegen</h3>
<form class="form-inline">
    <div class="input-append">
        <InputSelect id="message-animation" placeholder="Select an animation" @bind-Value=Animation>
            @*onchange=@SetColor*@
            @foreach (var item in Animations.OrderBy(i => i))
            {
                <option value=@item>@item</option>
            }
        </InputSelect>
    </div>
</form>

<div>
    <h3>Protokoll</h3>

    <ul id="message-list">
        @foreach (var msg in LogOutput)
        {
            <li>@msg</li>
        }
    </ul>
</div>

@code
{
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        /// Der Webclient muss die Animationen auflisten können.
        HubConnector.AddHandler<string>("AddAnimations", animations =>
        {
            foreach (var animation in animations.Split(','))
            {
                Animations.Add(animation);
            }
            InvokeAsync(StateHasChanged);
        });
    }

    ElementReference p_postInfo;

    public ValueTask<object> SetStatus(string status) => JSRuntime.InvokeAsync<object>("JsFunctions.SetContent", p_postInfo, status);

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            await SetStatus("Uploading file...");
            var trustedFileNameForFileStorage = Path.GetRandomFileName() + ".ogg";

            var path = Path.Combine(Directory.GetParent(Directory.GetParent(Directory.GetParent(Directory.GetParent(Environment.ProcessPath).FullName).FullName).FullName).FullName, "wwwroot", "posted", trustedFileNameForFileStorage);
            using (var stream = File.Create(path))
            {
                await e.File.OpenReadStream(5_000_000).CopyToAsync(stream);
            }
            await SetStatus("sending audio command...");
            await SetAudio($"{Navigation.BaseUri}{"posted"}/{trustedFileNameForFileStorage}");
            await SetStatus("sent audio command...");
        }
    }
}